openapi: 3.0.1
info:
  title: Auth server API
  version: '1.0.0'
servers:
  - url: 'http://localhost:8081'
    description: local

paths:
  /account:
    post:
      tags:
        - Account
      operationId: registerAccount
      description: 'Зарегистрировать аккаунт'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleAccountBackendResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /account/{telegramId}:
    get:
      tags:
        - Account
      operationId: getAccountByTgId
      description: 'Получить пользователя по tg id'
      parameters:
        - name: telegramId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleAccountBackendResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
#--------------------------------------------------------------------------------------------------------#
  /profile/{telegramId}:
    get:
      tags:
        - Profile
      operationId: getProfileByTgId
      description: 'Получить профайл пользователя по tg id'
      parameters:
        - name: telegramId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleProfileBackendResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  #--------------------------------------------------------------------------------------------------------#
components:
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BackendErrorResponse'
    '401':
      description: UNAUTHORIZED
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BackendErrorResponse'
    404:
      description: NOT_FOUND
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BackendErrorResponse'
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BackendErrorResponse'
#--------------------------------------------------------------------------------------------------------#
  schemas:
    BackendErrorResponse:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaData'
        errorCode:
          type: integer
        description:
          type: string
#--------------------------------------------------------------------------------------------------------#
    MetaData:
      type: object
      properties:
        timestamp:
          type: string
        path:
          type: string
#--------------------------------------------------------------------------------------------------------#
    BasicBackendResponse:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaData'
        errorCode:
          type: string
        description:
          type: string
#--------------------------------------------------------------------------------------------------------#
    CreateAccountRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        username:
          type: string
        accountType:
          type: string
          enum: [ "TG", "WEB" ]
        telegramId:
          type: integer
          format: int64
        telegramUserName:
          type: string
#--------------------------------------------------------------------------------------------------------#
    AccountResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        keycloakId:
          type: string
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        telegramUserName:
          type: string
        telegramId:
          type: integer
          format: int64
#--------------------------------------------------------------------------------------------------------#
    SingleAccountBackendResponse:
      allOf:
        - $ref: '#/components/schemas/BasicBackendResponse'
        - type: object
          properties:
            payload:
              $ref: '#/components/schemas/AccountResponse'
    ListAccountBackendResponse:
      allOf:
        - $ref: '#/components/schemas/BasicBackendResponse'
        - type: object
          properties:
            payload:
              type: array
              items:
                $ref: '#/components/schemas/AccountResponse'
#--------------------------------------------------------------------------------------------------------#
    SingleProfileBackendResponse:
      allOf:
        - $ref: '#/components/schemas/BasicBackendResponse'
        - type: object
          properties:
            payload:
              $ref: '#/components/schemas/ProfileResponse'
    ListProfileBackendResponse:
      allOf:
        - $ref: '#/components/schemas/BasicBackendResponse'
        - type: object
          properties:
            payload:
              type: array
              items:
                $ref: '#/components/schemas/ProfileResponse'
#--------------------------------------------------------------------------------------------------------#
    ProfileResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        accountId:
          type: integer
          format: int64
        role:
          type: string
        username:
          type: string
#--------------------------------------------------------------------------------------------------------#