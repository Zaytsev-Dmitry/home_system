// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	Bearer_keyScopes = "bearer_key.Scopes"
)

// BackendErrorResponse defines model for BackendErrorResponse.
type BackendErrorResponse struct {
	Description *string   `json:"description,omitempty"`
	ErrorCode   *int      `json:"errorCode,omitempty"`
	Meta        *MetaData `json:"meta,omitempty"`
}

// BasicBackendResponse defines model for BasicBackendResponse.
type BasicBackendResponse struct {
	Description *string   `json:"description,omitempty"`
	ErrorCode   *string   `json:"errorCode,omitempty"`
	Meta        *MetaData `json:"meta,omitempty"`
}

// CreateAccountRequest defines model for CreateAccountRequest.
type CreateAccountRequest struct {
	Email          *string `json:"email,omitempty"`
	TelegramUserId *int64  `json:"telegramUserId,omitempty"`
	Username       *string `json:"username,omitempty"`
}

// MetaData defines model for MetaData.
type MetaData struct {
	Path      *string `json:"path,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	AccountId *int64  `json:"accountId,omitempty"`
	Id        *int64  `json:"id,omitempty"`
	Role      *string `json:"role,omitempty"`
	Username  *string `json:"username,omitempty"`
}

// SingleProfileBackendResponse defines model for SingleProfileBackendResponse.
type SingleProfileBackendResponse struct {
	Description *string          `json:"description,omitempty"`
	ErrorCode   *string          `json:"errorCode,omitempty"`
	Meta        *MetaData        `json:"meta,omitempty"`
	Payload     *ProfileResponse `json:"payload,omitempty"`
}

// SingleUserIdentityBackendResponse defines model for SingleUserIdentityBackendResponse.
type SingleUserIdentityBackendResponse struct {
	Description *string               `json:"description,omitempty"`
	ErrorCode   *string               `json:"errorCode,omitempty"`
	Meta        *MetaData             `json:"meta,omitempty"`
	Payload     *UserIdentityResponse `json:"payload,omitempty"`
}

// UserIdentityResponse defines model for UserIdentityResponse.
type UserIdentityResponse struct {
	Email          *string `json:"email,omitempty"`
	TelegramUserId *int64  `json:"telegramUserId,omitempty"`
}

// N400 defines model for 400.
type N400 = BackendErrorResponse

// N401 defines model for 401.
type N401 = BackendErrorResponse

// N404 defines model for 404.
type N404 = BackendErrorResponse

// N409 defines model for 409.
type N409 = BackendErrorResponse

// N500 defines model for 500.
type N500 = BackendErrorResponse

// RegisterAccountParams defines parameters for RegisterAccount.
type RegisterAccountParams struct {
	TgUserId int64 `json:"tgUserId"`
}

// RegisterAccountJSONRequestBody defines body for RegisterAccount for application/json ContentType.
type RegisterAccountJSONRequestBody = CreateAccountRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /account/{telegramId})
	GetAccountByTgId(c *gin.Context, telegramId int64)

	// (POST /identity/user/register)
	RegisterAccount(c *gin.Context, params RegisterAccountParams)

	// (GET /profile/{telegramId})
	GetProfileByTgId(c *gin.Context, telegramId int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAccountByTgId operation middleware
func (siw *ServerInterfaceWrapper) GetAccountByTgId(c *gin.Context) {

	var err error

	// ------------- Path parameter "telegramId" -------------
	var telegramId int64

	err = runtime.BindStyledParameter("simple", false, "telegramId", c.Param("telegramId"), &telegramId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter telegramId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAccountByTgId(c, telegramId)
}

// RegisterAccount operation middleware
func (siw *ServerInterfaceWrapper) RegisterAccount(c *gin.Context) {

	var err error

	c.Set(Bearer_keyScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params RegisterAccountParams

	headers := c.Request.Header

	// ------------- Required header parameter "tgUserId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tgUserId")]; found {
		var TgUserId int64
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for tgUserId, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tgUserId", runtime.ParamLocationHeader, valueList[0], &TgUserId)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tgUserId: %w", err), http.StatusBadRequest)
			return
		}

		params.TgUserId = TgUserId

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter tgUserId is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterAccount(c, params)
}

// GetProfileByTgId operation middleware
func (siw *ServerInterfaceWrapper) GetProfileByTgId(c *gin.Context) {

	var err error

	// ------------- Path parameter "telegramId" -------------
	var telegramId int64

	err = runtime.BindStyledParameter("simple", false, "telegramId", c.Param("telegramId"), &telegramId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter telegramId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProfileByTgId(c, telegramId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/account/:telegramId", wrapper.GetAccountByTgId)
	router.POST(options.BaseURL+"/identity/user/register", wrapper.RegisterAccount)
	router.GET(options.BaseURL+"/profile/:telegramId", wrapper.GetProfileByTgId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xX3W4bRRR+FevA5SZrg0HN3sVpCwYRV/kRElWEprvH62l3Z5aZcSXLshRSJG4qcckl",
	"r2CBKkIjyivMvhE6s7Oxgzc4KSGtchV75vjM9835zjcnU4hlXkiBwmiIpqBQF1JodF+67Tb9iaUwKAx9",
	"ZEWR8ZgZLkX4VEtBazoeYc7o04cKhxDBB+EiZ1jt6rDH4mcokgdKSbXnD4HZbBZAgjpWvKCcEEGPJS2F",
	"341RG5gF0G13bh3C4e724cHng73+Nw/uVxi6t45hd3Dw7cPB4a4HsHXrAHakGGY8dkX45B3ooC8MKsGy",
	"1j6q56ha7gdAcT4THdSYLJpCoWSByvBKxhcST8FMCoQItFFcpEQP6ec7MsGlXS4MpqhoO0ezltVXaNh9",
	"ZpgD6FPIJ0+xur8e0zz2WG8W5mL3v6PcUcgMbsexHAuz51twBSXmjGeNCAxmmCqWH2pU/YRChlLlzFS3",
	"+WkXgobLHWuqct7EqQnjOYMVXAUzo2ZYPEdtWF5c8YhHSg55hpfXiVU3dGWK/KqBSmbNtb3mJe1zkWbo",
	"eTTIjmXZYAjR43WN2iDaWbB675NMsmSd9P55qw3Aj86hVwpCYbiZvCf4lyGtI9EY+/820ioQMkqMx4qb",
	"yT5xqA59gkyh2niGk8W3h3XyL74+AG+vlKnaXRw2MqaonJqLoXTIuSHFOsLOp3mMre1HfQjgOSpdGXln",
	"s73ZJlqyQMEKDhF8vNne7EDgetbBCn1PhdOaez+Z0UaKZsUawf5i39iz8kX5oz0tT8qXLfuXW3hpf7dv",
	"7K92Xp7YV/as/MlttEza4gm485V7sehO4TM03up6k4O0nzg4iuVoUGknLk5nOVsJoOo+WKCDAGhK4QoT",
	"iIwaY7D0/q0v11FwcdL66AZf2PU91PDcDr6sBo32ZdnP4YYUtJjM1sV2liaodbHdpWHj32MpyImepVQs",
	"8KWEI1oMuecdknGGClOuDSrXglI3CepnOy+P7Sv7mz0tvy9PymN7Wh7XWiKBze1r+9rOyxf2z/JkRUt7",
	"/oQaRbOURsgS10+1mFLf4DcgJfdY92QyuTEVNU4DM6ec91O511Hj1lVit66txtpwXc2XrfbxEZWpFisR",
	"3KgZbnjf9NItqnfyrY2QZFv+YOf2D3v2tr5YTw530hcvGYvuniV6oqQrJ036L6oq4EWamYxZBgGMVeYf",
	"+SgM3eJIahPda9/r0FjzdwAAAP//SFM3eikQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
