version: '3'
services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:4.0.6-management-alpine
    ports:
      - 5672:5672
      - 15672:15672 #Remove if not using management
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - skynet

  migrator:
    build:
      context: migrator
      dockerfile: Dockerfile
    container_name: migrator
    environment:
      CONFIG_PATH: "/app/configs/docker.yaml"
      APP_PROFILE: "docker"
    ports:
      - "8083:8083"
    depends_on:
      - postgres_server
    networks:
      - skynet

  auth-backend:
    build:
      context: authBackend
      dockerfile: Dockerfile
    container_name: authBackend
    ports:
      - "8081:8081"
    environment:
      MODE: docker
    restart: unless-stopped
    depends_on:
      - keycloak
      - postgres_server
    networks:
      - skynet

  note-backend:
    image: zaytsevdv/home-system-note-backend-dev:latest
    container_name: noteBackend
    ports:
      - "8080:8080"
    restart: unless-stopped
    environment:
      CONFIG_FILE: /app/configs/config-dev.yaml
    networks:
      - skynet
    depends_on:
      - postgres_server

  telegram-bot-backend:
    build:
      context: telegramBotBackend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      MODE: dev
    restart: unless-stopped
    networks:
      - skynet
    depends_on:
      - postgres_server
      - keycloak

  postgres_server:
    container_name: postgresServer
    restart: always
    image: postgres:14
    environment:
      PGUSER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - skynet

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      KEYCLOAK_IMPORT: /opt/keycloak/data/import/create-realm.json
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 7080
      KC_HOSTNAME_STRICT_BACKCHANNEL: "true"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: "true"
      KC_LOG_LEVEL: info
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgresServer:5432/keycloak
      KC_DB_USERNAME: keycloak_user
      KC_DB_PASSWORD: "32f21777-78c6-49bb-a5fe-b3ebeb325593"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7080/health/ready" ]
      interval: 15s
      timeout: 2s
      retries: 15
    command: [ "start-dev", "--import-realm", "--http-port", "7080", "--https-port", "7443" ]
    ports:
      - "7080:7080"
      - "7443:7443"
    volumes:
      - ./data/keycloak/create-realm.json:/opt/keycloak/data/import/create-realm.json
    networks:
      - skynet
    depends_on:
      - postgres_server

networks:
  skynet:




