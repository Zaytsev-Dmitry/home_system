// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CurrencyEnum.
const (
	RUB CurrencyEnum = "RUB"
	USD CurrencyEnum = "USD"
)

// BackendErrorResponse defines model for BackendErrorResponse.
type BackendErrorResponse struct {
	Description *string   `json:"description,omitempty"`
	ErrorCode   *int      `json:"errorCode,omitempty"`
	Meta        *MetaData `json:"meta,omitempty"`
}

// CurrencyEnum defines model for CurrencyEnum.
type CurrencyEnum string

// MetaData defines model for MetaData.
type MetaData struct {
	Path      *string `json:"path,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// N400 defines model for 400.
type N400 = BackendErrorResponse

// N401 defines model for 401.
type N401 = BackendErrorResponse

// N404 defines model for 404.
type N404 = BackendErrorResponse

// N500 defines model for 500.
type N500 = BackendErrorResponse

// CreateBoardParams defines parameters for CreateBoard.
type CreateBoardParams struct {
	Name     string       `form:"name" json:"name"`
	Currency CurrencyEnum `form:"currency" json:"currency"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /board)
	GetAllBoards(c *gin.Context)

	// (POST /board)
	CreateBoard(c *gin.Context, params CreateBoardParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAllBoards operation middleware
func (siw *ServerInterfaceWrapper) GetAllBoards(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllBoards(c)
}

// CreateBoard operation middleware
func (siw *ServerInterfaceWrapper) CreateBoard(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateBoardParams

	// ------------- Required query parameter "name" -------------

	if paramValue := c.Query("name"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument name is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "currency" -------------

	if paramValue := c.Query("currency"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument currency is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "currency", c.Request.URL.Query(), &params.Currency)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter currency: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBoard(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/board", wrapper.GetAllBoards)
	router.POST(options.BaseURL+"/board", wrapper.CreateBoard)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xUwW7UPBB+lWj+/xg2KWylKrduu8AeaFHbvYBWyE2muy6J7Y6dimqVQ+mBC++AeAOE",
	"iqhA6jM4b4TsLG2XRC3iUDjZ8Uw+fzPfN55DKgslBQqjIZkDoVZSaPQf/Th2SyqFQWHclimV85QZLkV0",
	"qKVwZzqdYcHc7n/CA0jgv+gaM2qiOhqw9DWKbEgkaWdxCVRVFUKGOiWuHCYkMGBZQHhUojZQhdCPV+6d",
	"wnhrfbz3dHtn9GK42XDo3zuHre29V4+3x1uewOpf0GEkDJJgebCLdIwU+B/A5S2Q3EWdYMkcFEmFZHhj",
	"oyXgOZgThZCANsTF1JWH7vcNmeGNKBcGp0guXKC5s6pnaNgmM8wTXEDI/UNMvYk2SiIU6clQlIVDQr++",
	"hJ3xAEIY727CJGzTusJsFaSYmXVWYniB2rBCdUTbxNwRFwfSJ3OTu9jwjUKhOQt00/b15yMI4RhJN7Ks",
	"9OJe7K6SCgVTHBJ41It7KxB6Vp5etC8ZZW43RdMSAOwHe2m/12f1O3tRv63fB/ZzfWq/BPbcXtan9pu9",
	"AA9P3l6jDBJ4gmY9zwcOVkO4/Eg8bKbjF/vK4Kdbr4e4S8ArqMglXQ/bXbn9G3Nxe65L8s1nU+1E91U8",
	"cK7mKcKkCkFJ3dWmj/bSfrXn9lPTpEV36rNWdzYImUGP62UgVqBBcrfNgTusoxLpBEIQrHAi+8W18ajk",
	"hBkkhkoMbwxwyzrdOOnC17di3TY2S4NRVZM/kTb+Hbnif94G/mXzM9fotlx0LlOWQwgl5ZDAzBiVRJE/",
	"nEltkrV4bRWqSfUjAAD//5vKpzFOBwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
