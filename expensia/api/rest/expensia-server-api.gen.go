// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package rest

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CurrencyEnum.
const (
	RUB CurrencyEnum = "RUB"
	USD CurrencyEnum = "USD"
)

// BackendErrorResponse defines model for BackendErrorResponse.
type BackendErrorResponse struct {
	Description *string   `json:"description,omitempty"`
	ErrorCode   *int      `json:"errorCode,omitempty"`
	Meta        *MetaData `json:"meta,omitempty"`
}

// BasicBackendResponse defines model for BasicBackendResponse.
type BasicBackendResponse struct {
	Description *string   `json:"description,omitempty"`
	ErrorCode   *string   `json:"errorCode,omitempty"`
	Meta        *MetaData `json:"meta,omitempty"`
}

// BoardResponse defines model for BoardResponse.
type BoardResponse struct {
	Currency *string `json:"currency,omitempty"`
	Name     *string `json:"name,omitempty"`
	Owner    *int64  `json:"owner,omitempty"`
}

// CreateBoardBackendResponse defines model for CreateBoardBackendResponse.
type CreateBoardBackendResponse struct {
	Description *string        `json:"description,omitempty"`
	ErrorCode   *string        `json:"errorCode,omitempty"`
	Meta        *MetaData      `json:"meta,omitempty"`
	Payload     *BoardResponse `json:"payload,omitempty"`
}

// CurrencyEnum defines model for CurrencyEnum.
type CurrencyEnum string

// ListBoardBackendResponse defines model for ListBoardBackendResponse.
type ListBoardBackendResponse struct {
	Description *string          `json:"description,omitempty"`
	ErrorCode   *string          `json:"errorCode,omitempty"`
	Meta        *MetaData        `json:"meta,omitempty"`
	Payload     *[]BoardResponse `json:"payload,omitempty"`
}

// MetaData defines model for MetaData.
type MetaData struct {
	Path      *string `json:"path,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// N400 defines model for 400.
type N400 = BackendErrorResponse

// N401 defines model for 401.
type N401 = BackendErrorResponse

// N404 defines model for 404.
type N404 = BackendErrorResponse

// N409 defines model for 409.
type N409 = BackendErrorResponse

// N500 defines model for 500.
type N500 = BackendErrorResponse

// CreateBoardParams defines parameters for CreateBoard.
type CreateBoardParams struct {
	Name     string       `form:"name" json:"name"`
	Currency CurrencyEnum `form:"currency" json:"currency"`
	TgUserId int64        `form:"tgUserId" json:"tgUserId"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /board)
	CreateBoard(c *gin.Context, params CreateBoardParams)

	// (GET /board/{tgUserId})
	GetAllBoards(c *gin.Context, tgUserId int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateBoard operation middleware
func (siw *ServerInterfaceWrapper) CreateBoard(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateBoardParams

	// ------------- Required query parameter "name" -------------

	if paramValue := c.Query("name"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument name is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "currency" -------------

	if paramValue := c.Query("currency"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument currency is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "currency", c.Request.URL.Query(), &params.Currency)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter currency: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "tgUserId" -------------

	if paramValue := c.Query("tgUserId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument tgUserId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "tgUserId", c.Request.URL.Query(), &params.TgUserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tgUserId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBoard(c, params)
}

// GetAllBoards operation middleware
func (siw *ServerInterfaceWrapper) GetAllBoards(c *gin.Context) {

	var err error

	// ------------- Path parameter "tgUserId" -------------
	var tgUserId int64

	err = runtime.BindStyledParameter("simple", false, "tgUserId", c.Param("tgUserId"), &tgUserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tgUserId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllBoards(c, tgUserId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/board", wrapper.CreateBoard)
	router.GET(options.BaseURL+"/board/:tgUserId", wrapper.GetAllBoards)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW3W7aShB+FTTnXPpgcw45SnwXEs4pahuqJNw0QtXGHmBTe9eZXdIixEWai970Haq+",
	"QVWlatRK9BXMG1W7JvwUA6pEqXpl8Iy/+Wb2m5ntQyDjRAoUWoHfB0KVSKHQ/il7nnkEUmgU2vxkSRLx",
	"gGkuhXuhpDDvVNDBmJlffxK2wIc/3Cmmm1mVW2HBcxRhlUjS8TgIDAYDB0JUAfHEYIIPFRYWCC+7qDQM",
	"HCh7pa1TaBztN04f1I9rT6uHGYfy1jkc1U+f/VdvHI0J7G2dwIEUrYgH9hB2foEOakIjCRYVTpCukAr2",
	"AzB+YyQTKBfM70NCMkHSPJPxHHAfdC9B8EFp4qJt0kPz+YEMccbKhcY2kjHHqNdm9Rg1O2SaWYJjCHl+",
	"gVn9KkzxYMx1szSn1g2wlIxW0Au6RCiCXm50weJ8WvKFQDKWlqSY6ayy/5bBWSh0HqUDQqbREsspH4ui",
	"egv8s3WCyyn+wPk+vYT1IsnCtfKdK1IO6aahPS5VVXRjA4j2eQbHjQo40Dg5hKazWKpHXOltp8o1xuoH",
	"c55QZ0Sst6wGE635i+F1J1crmseoNIuTHOtiEPOKi5a0zlxHxlZ9maBQnBVUNjT2n9TAgSsklQ2VUtEr",
	"elaWCQqWcPDhn6JXLIFjWVl67rlJ1xKVSi80JqTv0mH6Kb1N349ejd4U0tt0OLpOP49uwMKSHYq10IzQ",
	"qXptAGIxaiRlz5EbrMsuUg/u2yd7OGDWHycMwdfURWdmsC4UJR9n0qqrsFad+JyAl4bR7YZCqoUrw6zv",
	"+6Yzf+v4e4PbZsUAydk59YfZtvWWwU54usZpej1Z51uauUas8y3PbNzVvsbJNgZrG01lA/wvsy95gNA0",
	"pkzMbv/+qAYGtY15sn6bDtMvo5vR6/QuE/aH0XX6caLv9K6Qfk2HhZlDn1f7/6j3o8hyUEvkbjv/d5LP",
	"0pG8Qjw/RxDjK+A6373NicfctOwUzQ5wPtlIBiwCB7oUgQ8drRPfde3LjlTa3/V2d8wa+BYAAP//5Ju1",
	"Il4MAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
