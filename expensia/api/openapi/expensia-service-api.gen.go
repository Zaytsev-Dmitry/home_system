// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for CurrencyEnum.
const (
	RUB CurrencyEnum = "RUB"
	USD CurrencyEnum = "USD"
)

// BackendErrorResponse defines model for BackendErrorResponse.
type BackendErrorResponse struct {
	Description *string   `json:"description,omitempty"`
	ErrorCode   *int      `json:"errorCode,omitempty"`
	Meta        *MetaData `json:"meta,omitempty"`
}

// BasicBackendResponse defines model for BasicBackendResponse.
type BasicBackendResponse struct {
	Description *string   `json:"description,omitempty"`
	ErrorCode   *string   `json:"errorCode,omitempty"`
	Meta        *MetaData `json:"meta,omitempty"`
}

// BoardResponse defines model for BoardResponse.
type BoardResponse struct {
	Currency *string `json:"currency,omitempty"`
	Name     *string `json:"name,omitempty"`
	Owner    *int64  `json:"owner,omitempty"`
}

// CurrencyEnum defines model for CurrencyEnum.
type CurrencyEnum string

// ListBoardBackendResponse defines model for ListBoardBackendResponse.
type ListBoardBackendResponse struct {
	Description *string          `json:"description,omitempty"`
	ErrorCode   *string          `json:"errorCode,omitempty"`
	Meta        *MetaData        `json:"meta,omitempty"`
	Payload     *[]BoardResponse `json:"payload,omitempty"`
}

// MetaData defines model for MetaData.
type MetaData struct {
	Path      *string `json:"path,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// SingleBoardBackendResponse defines model for SingleBoardBackendResponse.
type SingleBoardBackendResponse struct {
	Description *string        `json:"description,omitempty"`
	ErrorCode   *string        `json:"errorCode,omitempty"`
	Meta        *MetaData      `json:"meta,omitempty"`
	Payload     *BoardResponse `json:"payload,omitempty"`
}

// TgUserIdHeader defines model for tgUserIdHeader.
type TgUserIdHeader = int64

// N400 defines model for 400.
type N400 = BackendErrorResponse

// N401 defines model for 401.
type N401 = BackendErrorResponse

// N404 defines model for 404.
type N404 = BackendErrorResponse

// N409 defines model for 409.
type N409 = BackendErrorResponse

// N500 defines model for 500.
type N500 = BackendErrorResponse

// GetAllBoardsParams defines parameters for GetAllBoards.
type GetAllBoardsParams struct {
	TgUserId TgUserIdHeader `json:"tgUserId"`
}

// CreateBoardParams defines parameters for CreateBoard.
type CreateBoardParams struct {
	Name     string         `form:"name" json:"name"`
	Currency CurrencyEnum   `form:"currency" json:"currency"`
	TgUserId TgUserIdHeader `json:"tgUserId"`
}

// AddParticipantToBoardParams defines parameters for AddParticipantToBoard.
type AddParticipantToBoardParams struct {
	BoardId                 int64          `form:"boardId" json:"boardId"`
	ParticipantTgUserIdList []int64        `form:"participantTgUserIdList" json:"participantTgUserIdList"`
	TgUserId                TgUserIdHeader `json:"tgUserId"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /board)
	GetAllBoards(c *gin.Context, params GetAllBoardsParams)

	// (POST /board)
	CreateBoard(c *gin.Context, params CreateBoardParams)

	// (POST /board/add/participant)
	AddParticipantToBoard(c *gin.Context, params AddParticipantToBoardParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAllBoards operation middleware
func (siw *ServerInterfaceWrapper) GetAllBoards(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllBoardsParams

	headers := c.Request.Header

	// ------------- Required header parameter "tgUserId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tgUserId")]; found {
		var TgUserId TgUserIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for tgUserId, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tgUserId", runtime.ParamLocationHeader, valueList[0], &TgUserId)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tgUserId: %w", err), http.StatusBadRequest)
			return
		}

		params.TgUserId = TgUserId

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter tgUserId is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllBoards(c, params)
}

// CreateBoard operation middleware
func (siw *ServerInterfaceWrapper) CreateBoard(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateBoardParams

	// ------------- Required query parameter "name" -------------

	if paramValue := c.Query("name"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument name is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "currency" -------------

	if paramValue := c.Query("currency"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument currency is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "currency", c.Request.URL.Query(), &params.Currency)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter currency: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "tgUserId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tgUserId")]; found {
		var TgUserId TgUserIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for tgUserId, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tgUserId", runtime.ParamLocationHeader, valueList[0], &TgUserId)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tgUserId: %w", err), http.StatusBadRequest)
			return
		}

		params.TgUserId = TgUserId

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter tgUserId is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateBoard(c, params)
}

// AddParticipantToBoard operation middleware
func (siw *ServerInterfaceWrapper) AddParticipantToBoard(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AddParticipantToBoardParams

	// ------------- Required query parameter "boardId" -------------

	if paramValue := c.Query("boardId"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument boardId is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "boardId", c.Request.URL.Query(), &params.BoardId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter boardId: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "participantTgUserIdList" -------------

	if paramValue := c.Query("participantTgUserIdList"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument participantTgUserIdList is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "participantTgUserIdList", c.Request.URL.Query(), &params.ParticipantTgUserIdList)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter participantTgUserIdList: %w", err), http.StatusBadRequest)
		return
	}

	headers := c.Request.Header

	// ------------- Required header parameter "tgUserId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("tgUserId")]; found {
		var TgUserId TgUserIdHeader
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for tgUserId, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "tgUserId", runtime.ParamLocationHeader, valueList[0], &TgUserId)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter tgUserId: %w", err), http.StatusBadRequest)
			return
		}

		params.TgUserId = TgUserId

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter tgUserId is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddParticipantToBoard(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/board", wrapper.GetAllBoards)
	router.POST(options.BaseURL+"/board", wrapper.CreateBoard)
	router.POST(options.BaseURL+"/board/add/participant", wrapper.AddParticipantToBoard)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXT3PbRBT/KpoHRxEp4DKtboljqAewO4l9oZNhttKzs0XaVXfXBU/Gh7QHLhy5M3yD",
	"kClDpkzNV1h9I2Z3heVEskyHYHKStPv2/f2931udQ8yznDNkSkJ0DjkRJEOFwn6p6Vii6CePkSQozApl",
	"EMGZ+/SBkQwhWomBDwJfzKjABCIlZuiDjM8wI+bkhIuMKIiAMvVpB3xQ8xzdJ05RwGKxMMdlzplEa70T",
	"huYRc6aQKfNK8jylMVGUs+C55MysVRY+FDiBCD4IqpACtyuDQxJ/iyzpCcHFcWnEmUxQxoLmRidEcEgS",
	"z8SAUsHCh064v3MXxoOD8ejx8Lj/de/I+dDZuQ+D4eibz4bjQenAo5070OVsktLYFuHB/4CDPlMoGEm9",
	"ExQvUXj2ABi5UpMx1KjMNJHgOQpFHYxvKD7/G/ZSCcqmJjw0x7s8wbXdVVP4kKHaGtVXqMgRUcQ6WKrg",
	"z56jy98hkTQufb1bN6vdO/CSE9HiXjwTAlk8b7TueKhhg3/HHG9tZ58Gl7qlzR6bZUYJ2udTOB4fgg/j",
	"kyM49es2v6RS2WAaUk7SdDiB6Ok2kDYUbOHfTklO5ikniaVlhZnciv0bGa4CJkKQeVMGThc+rIoW1c2r",
	"s8akK5qhVCTLG3ab0nxC2TTFXafsPTLVlBmzSNmE2xipSs1u7/scmaTEk440Dp70wYeXKKQjlf29cC+0",
	"sMyRkZxCBJ/shXv74NtkWg+DZ8a2eZuiqvUl6J/1Uv9RvC5+0NfFq+JHT18VF/o3T7/Ry+JCv9XXnv5T",
	"L721kWzit1TZTyCCz1EdpKkNUFq71bzfkOJKJLh1H1ic3prYH98hU29sowa2Hn6xNqyblK68DIxQNVS3",
	"yXbW5t822Udrs6pd1ghZUJGpSbujvo/MpKExgum6nMum4v+il/p3/UZfutKXNS9e16rcFUiUa6l6ke0d",
	"7sUMxby6wtlH2/Wt1sfNelY03aarrew3ONeauUeYbGGqFlSG/wQ94X+J4DtB5cIvySkgSWIqoGhMc+Jy",
	"ugGwP+ml/lVf6quSrSxxXRYXxSv9Tl/rt3qprzz9Tl+2gfkgSZ5U1kZ8A6zfEycbAGwj/Ne/MhuUryVt",
	"VLpjaK7V2Gq0b7VaG+j1VujUazQYet3hYNQbjO4/As31245WV/GbgaQ8Jin4MBOp+UdVKo+CwC6ecami",
	"h+HDB2Zw/xUAAP//RianDvIOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
